{
    "version": "https://jsonfeed.org/version/1",
    "title": "nesman.dev",
    "description": "",
    "home_page_url": "https://nesman.dev",
    "feed_url": "https://nesman.dev/feed.json",
    "user_comment": "",
    "author": {
        "name": "Neil Stottler"
    },
    "items": [
        {
            "id": "https://nesman.dev/baxter-2.html",
            "url": "https://nesman.dev/baxter-2.html",
            "title": "Baxter",
            "summary": "Life is busy, so I don't think I'll write a lot about the map. This is Baxter, a control point&hellip;",
            "content_html": "\n  <p>\n    Life is busy, so I don't think I'll write a lot about the map. This is Baxter, a control point map for Team Fortress 2 taking place in Baxter, Maine inside of a nuclear power plant. Please consider voting for it on the <a href=\"https://steamcommunity.com/sharedfiles/filedetails/?id=3236274424 \">Steam Workshop</a> below. This has been my labor of love for the past three years, finished in 2024.<br><br><a href=\"https://steamcommunity.com/sharedfiles/filedetails/?id=3236274424 \">https://steamcommunity.com/sharedfiles/filedetails/?id=3236274424&nbsp;<br></a><br><a href=\"https://tf2maps.net/downloads/baxter.12602/ \">https://tf2maps.net/downloads/baxter.12602/&nbsp;</a>\n  </p>\n\n  <div  class=\"gallery-wrapper gallery-wrapper--full\">\n    <div class=\"gallery\" data-columns=\"2\">\n      <figure class=\"gallery__item\">\n      <a href=\"https://nesman.dev/media/posts/8/gallery/262461-196747462114506cebf15ec2f8bf3d16.jpg\" data-size=\"1936x1096\">\n        <img loading=\"lazy\" src=\"https://nesman.dev/media/posts/8/gallery/262461-196747462114506cebf15ec2f8bf3d16-thumbnail.jpg\" height=\"408\" width=\"720\" alt=\"\" >\n      </a>\n      \n    </figure><figure class=\"gallery__item\">\n      <a href=\"https://nesman.dev/media/posts/8/gallery/20240430105812_1.jpg\" data-size=\"1936x1096\">\n        <img loading=\"lazy\" src=\"https://nesman.dev/media/posts/8/gallery/20240430105812_1-thumbnail.jpg\" height=\"408\" width=\"720\" alt=\"\" >\n      </a>\n      \n    </figure><figure class=\"gallery__item\">\n      <a href=\"https://nesman.dev/media/posts/8/gallery/20240430105817_1.jpg\" data-size=\"1936x1096\">\n        <img loading=\"lazy\" src=\"https://nesman.dev/media/posts/8/gallery/20240430105817_1-thumbnail.jpg\" height=\"408\" width=\"720\" alt=\"\" >\n      </a>\n      \n    </figure><figure class=\"gallery__item\">\n      <a href=\"https://nesman.dev/media/posts/8/gallery/20240430105821_1.jpg\" data-size=\"1936x1096\">\n        <img loading=\"lazy\" src=\"https://nesman.dev/media/posts/8/gallery/20240430105821_1-thumbnail.jpg\" height=\"408\" width=\"720\" alt=\"\" >\n      </a>\n      \n    </figure><figure class=\"gallery__item\">\n      <a href=\"https://nesman.dev/media/posts/8/gallery/20240430105827_1.jpg\" data-size=\"1936x1096\">\n        <img loading=\"lazy\" src=\"https://nesman.dev/media/posts/8/gallery/20240430105827_1-thumbnail.jpg\" height=\"408\" width=\"720\" alt=\"\" >\n      </a>\n      \n    </figure><figure class=\"gallery__item\">\n      <a href=\"https://nesman.dev/media/posts/8/gallery/20240430105834_1.jpg\" data-size=\"1936x1096\">\n        <img loading=\"lazy\" src=\"https://nesman.dev/media/posts/8/gallery/20240430105834_1-thumbnail.jpg\" height=\"408\" width=\"720\" alt=\"\" >\n      </a>\n      \n    </figure><figure class=\"gallery__item\">\n      <a href=\"https://nesman.dev/media/posts/8/gallery/20240430105839_1.jpg\" data-size=\"1936x1096\">\n        <img loading=\"lazy\" src=\"https://nesman.dev/media/posts/8/gallery/20240430105839_1-thumbnail.jpg\" height=\"408\" width=\"720\" alt=\"\" >\n      </a>\n      \n    </figure><figure class=\"gallery__item\">\n      <a href=\"https://nesman.dev/media/posts/8/gallery/20240430105843_1.jpg\" data-size=\"1936x1096\">\n        <img loading=\"lazy\" src=\"https://nesman.dev/media/posts/8/gallery/20240430105843_1-thumbnail.jpg\" height=\"408\" width=\"720\" alt=\"\" >\n      </a>\n      \n    </figure><figure class=\"gallery__item\">\n      <a href=\"https://nesman.dev/media/posts/8/gallery/20240430105851_1.jpg\" data-size=\"1936x1096\">\n        <img loading=\"lazy\" src=\"https://nesman.dev/media/posts/8/gallery/20240430105851_1-thumbnail.jpg\" height=\"408\" width=\"720\" alt=\"\" >\n      </a>\n      \n    </figure><figure class=\"gallery__item\">\n      <a href=\"https://nesman.dev/media/posts/8/gallery/20240430105856_1.jpg\" data-size=\"1936x1096\">\n        <img loading=\"lazy\" src=\"https://nesman.dev/media/posts/8/gallery/20240430105856_1-thumbnail.jpg\" height=\"408\" width=\"720\" alt=\"\" >\n      </a>\n      \n    </figure><figure class=\"gallery__item\">\n      <a href=\"https://nesman.dev/media/posts/8/262450-7d2ef2b69ca9e71b40c2c20eff5f6fc7.png\" data-size=\"1936x1096\">\n        <img loading=\"lazy\" src=\"https://nesman.dev/media/posts/8/responsive/262450-7d2ef2b69ca9e71b40c2c20eff5f6fc7-xs.png\" height=\"170\" width=\"300\" alt=\"\"  sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://nesman.dev/media/posts/8/responsive/responsive/262450-7d2ef2b69ca9e71b40c2c20eff5f6fc7-xs-xs.png 300w ,https://nesman.dev/media/posts/8/responsive/responsive/262450-7d2ef2b69ca9e71b40c2c20eff5f6fc7-xs-sm.png 480w ,https://nesman.dev/media/posts/8/responsive/responsive/262450-7d2ef2b69ca9e71b40c2c20eff5f6fc7-xs-md.png 768w\">\n      </a>\n      \n    </figure><figure class=\"gallery__item\">\n      <a href=\"https://nesman.dev/media/posts/8/gallery/20240430105902_1.jpg\" data-size=\"1936x1096\">\n        <img loading=\"lazy\" src=\"https://nesman.dev/media/posts/8/gallery/20240430105902_1-thumbnail.jpg\" height=\"408\" width=\"720\" alt=\"\" >\n      </a>\n      \n    </figure><figure class=\"gallery__item\">\n      <a href=\"https://nesman.dev/media/posts/8/gallery/20240430105909_1.jpg\" data-size=\"1936x1096\">\n        <img loading=\"lazy\" src=\"https://nesman.dev/media/posts/8/gallery/20240430105909_1-thumbnail.jpg\" height=\"408\" width=\"720\" alt=\"\" >\n      </a>\n      \n    </figure><figure class=\"gallery__item\">\n      <a href=\"https://nesman.dev/media/posts/8/gallery/20240430105913_1.jpg\" data-size=\"1936x1096\">\n        <img loading=\"lazy\" src=\"https://nesman.dev/media/posts/8/gallery/20240430105913_1-thumbnail.jpg\" height=\"408\" width=\"720\" alt=\"\" >\n      </a>\n      \n    </figure><figure class=\"gallery__item\">\n      <a href=\"https://nesman.dev/media/posts/8/gallery/20240430105920_1.jpg\" data-size=\"1936x1096\">\n        <img loading=\"lazy\" src=\"https://nesman.dev/media/posts/8/gallery/20240430105920_1-thumbnail.jpg\" height=\"408\" width=\"720\" alt=\"\" >\n      </a>\n      \n    </figure>\n    </div>\n  </div>",
            "image": "https://nesman.dev/media/posts/8/262450-7d2ef2b69ca9e71b40c2c20eff5f6fc7-2.png",
            "author": {
                "name": "Neil Stottler"
            },
            "tags": [
                   "Level Design",
                   "Gaming"
            ],
            "date_published": "2024-10-10T18:51:49-04:00",
            "date_modified": "2024-10-10T18:53:28-04:00"
        },
        {
            "id": "https://nesman.dev/writing-a-script-in-python.html",
            "url": "https://nesman.dev/writing-a-script-in-python.html",
            "title": "Writing a script in Python",
            "summary": "By trade I am not a software developer, but I find it interesting enough to sink hours of my life&hellip;",
            "content_html": "\n  <p>\n    By trade I am not a software developer, but I find it interesting enough to sink hours of my life into. As a hobbyist I have been picking up coding more and more just because of the usefulness of being able to make a custom script for a specific purpose when I need it.<br>\n  </p>\n<hr class=\"separator separator--long-line\" />\n\n    <h2 id=\"finding-a-purpose-and-filling-it\">\n      Finding a Purpose and Filling it\n    </h2>\n\n  <p>\n    Being a practical person who learns best by filling a need I was faced with a unique problem. For those who don't know, I am one of the Senior Staff members over at <a href=\"https://tf2maps.net\">TF2Maps.net</a>&nbsp;and over the past year I have been using my skills learned in college to help keep the place running. I need to put that degree in Computer Networking to use after all. With that, I also use the need of keeping the place physically functioning to learn more.\n  </p>\n\n  <p>\n    With that comes the purpose I am trying to fill with this script. On TF2Maps.net we have this thing called maps, they are levels to the video game Team Fortress 2 and we are a community that focuses on the creation of these levels and everything needed to do so. Once a year we try to feature the best community made maps from that year or prior years if we missed something, let's call these featured maps. We also run two servers for playing Team Fortress 2 on. We want to be running these featured maps on these two servers, it is also important to know we have to configure the servers to run these maps using what is called a mapcycle.txt file, each file in that file represents a map that is in the \"rotation\". So what's the problem? There's a lot of maps, around 200 or so, and I would have to download each one of those maps, unzip or decompress it if it's like that, add it to the mapcycle.txt on each server, and then upload the map to each of the servers. That's a lot of work! Let's automate it.\n  </p>\n<hr class=\"separator separator--long-line\" />\n\n    <h2 id=\"analyzing-options\">\n      Analyzing Options\n    </h2>\n\n  <p>\n    There's a couple of options for what we could do. We could use <a href=\"https://xenforo.com/docs/dev/rest-api/\">Xenforo's REST API</a>&nbsp;to directly query the forums database for the file to download locally, I have the ability to make an API key since it is locked by default. We could use a Python library for scraping html pages, this would require no API tokens. I think for this it makes more sense to use a scraper since that doesn't require any database access.\n  </p>\n\n  <p>\n    The next thing to analyze is if I want this script to be something that runs on a server or not. I think for the time being it makes more sense to have this be a local script that I can run on my machine since I am developing it.\n  </p>\n\n    <h2 id=\"looking-at-the-basics\">\n      Looking at The Basics\n    </h2>\n\n  <p>\n    Now I need to figure out my starting point. Our featured maps page, as seen below, provided me with some useful information believe it or not.&nbsp;\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://nesman.dev/media/posts/7/featured_maps_page.PNG\" height=\"639\" width=\"1209\" alt=\"\"  sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://nesman.dev/media/posts/7/responsive/featured_maps_page-xs.PNG 300w ,https://nesman.dev/media/posts/7/responsive/featured_maps_page-sm.PNG 480w ,https://nesman.dev/media/posts/7/responsive/featured_maps_page-md.PNG 768w\">\n      \n    </figure>\n\n  <p>\n    The featured maps page is a list if you think about it. Unordered but still a list. This list doesn't provide us with download files, but it provides us with means of getting those download files. Shown below is the download page for that specific map which we can use in the script.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://nesman.dev/media/posts/7/featured_maps_code.PNG\" height=\"231\" width=\"796\" alt=\"\"  sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://nesman.dev/media/posts/7/responsive/featured_maps_code-xs.PNG 300w ,https://nesman.dev/media/posts/7/responsive/featured_maps_code-sm.PNG 480w ,https://nesman.dev/media/posts/7/responsive/featured_maps_code-md.PNG 768w\">\n      \n    </figure>\n\n  <p>\n    Parsing html files in Python isn't really native so I had to use a third-party library for this. BeautifulSoup4 is the most current version of a html scraper I've seen used before. With BS4 I can look for specific html elements and grab their associated values. Now that I have the list assembled in some order I can use each one of those links to point me to a download page for that map. On the download page it's a similar story where the only useful thing to me is a link hidden in a button. Grab it with the webscraper and download the file locally.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://nesman.dev/media/posts/7/featured_maps_code2.PNG\" height=\"133\" width=\"986\" alt=\"\"  sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://nesman.dev/media/posts/7/responsive/featured_maps_code2-xs.PNG 300w ,https://nesman.dev/media/posts/7/responsive/featured_maps_code2-sm.PNG 480w ,https://nesman.dev/media/posts/7/responsive/featured_maps_code2-md.PNG 768w\">\n      \n    </figure>\n\n  <p>\n    I wasn't sure how to approach this so I looked online and found someone else's solution and modified it to my needs. I'll take the URL that I got earlier and the destination on my local system where to put the file for manipulation if needed.\n  </p>\n<pre class=\"line-numbers  language-python\"><code>async def download_file(link, destination):\n    async with httpx.AsyncClient() as client:\n        response = await client.get(link)\n\n        with open(destination, \"wb\") as file:\n            file.write(response.content)</code></pre>\n<hr class=\"separator separator--long-line\" />\n\n    <h2 id=\"file-manipulation\">\n      File Manipulation\n    </h2>\n\n  <p>\n    There are a couple of challenges with downloading the map files from about 150+ different people. Everyone uploads them differently! Some put their map files plus other stuff into a zip file, some are in a bz2 archive, and some are just the straight bsp's. I also need to sort out non-map featured content and mvm maps since those are put on their own server. This was something I had to sort through manually before, let's automate it. Because there are only three file types I am dealing with here this feature can be rather simple. I can just check if the file ends with one of the three specific filetypes and modify it if needed.\n  </p>\n<pre class=\"line-numbers  language-python\"><code>                maps = ['arena_', 'cp_', 'ctf_', 'koth_', 'pass_', 'pd_', 'pl_', 'plr_', 'sd_']\n\n                #filter for mvm maps\n                if downloaded_filename.startswith(tuple(maps)):\n                    if downloaded_filename.endswith(\".bsp\"):\n                        #to things\n\n                    #bz2 check\n                    if downloaded_filename.endswith(\".bz2\"):\n                        #decompress and do things\n\n                    #zip check\n                    if downloaded_filename.endswith(\".zip\"):\n                        #unzip and do things</code></pre>\n\n  <p>\n    Now I can start messing with the files specifically. The zip file was the trickiest one to write as there were a bunch of edge cases I had to deal with. Different map authors have different standards, some put just their map into the zip file and nothing else while others put their map and other assets plus a readme.txt file. I had to filter through all this stuff and look for just the bsp. When I was getting the filename I decided to split it by slashes and look for the bsp that way and only extract that and discard the rest.\n  </p>\n<pre class=\"line-numbers  language-python\"><code>async def unzip_file(filepath, downloaded_filename):\n    global bsp_file_name\n    \n    with ZipFile(filepath) as originalzip:\n        zipcontents = ZipFile.infolist(originalzip)\n        for file in zipcontents:\n            #check for bsp in folders\n            if file.filename.endswith('.bsp'):\n\n                #this is only for mappers who put their map in a folder in a zip\n                if '/' in file.filename:\n                    desired_file = file.filename.split('/')\n\n                    #get it\n                    with open('maps/' + desired_file[1], 'wb') as fileoutput:\n                        fileoutput.write(originalzip.read(str(file.filename)))\n                        \n                        #set this value for bz2 compression later\n                        bsp_file_name = str(desired_file[1])\n                else:\n                    with open('maps/' + file.filename, 'wb') as fileoutput:\n                        fileoutput.write(originalzip.read(str(file.filename)))\n\n                        #set this value for bz2 compression later\n                        bsp_file_name = str(file.filename)\n    \n    #remove zip file\n    os.remove(os.getcwd() + '/maps/' + downloaded_filename)</code></pre>\n\n  <p>\n    Similar to the zip files I had to extract the bsp from the bz2 file. Luckily bz2 is used on the fastdl server so the files that used this were standardized. Fastdl is what serves the player the map if they do now already have it downloaded, this is important for later.\n  </p>\n<pre class=\"line-numbers  language-python\"><code>async def bz2_decompress(filepath, downloaded_filename):\n    global bsp_file_name\n\n    with bz2.BZ2File(filepath) as f:\n        data = f.read()\n        newfilepath = filepath[:-4]\n        open(newfilepath, 'wb').write(data)\n\n        bsp_file_name = str(newfilepath).split('/')[-1]\n\n    #remove bz2 after extracting\n    os.remove(os.getcwd() + '/maps/' + downloaded_filename)</code></pre>\n\n  <p>\n    Now that all the files are downloaded and the bsp's are exported I can add them to the mapcycle.txt file for use on the servers. This can be a very simple function as it's only writing to a text file and nothing more.\n  </p>\n<pre class=\"line-numbers  language-python\"><code>async def add_to_mapcycle(mapname):\n    #print to mapcycle file\n    with open(\"mapcycle.txt\", \"a\") as f:\n        splited = mapname.split(\".\")\n        f.write(splited[0] + \"\\n\")</code></pre>\n\n  <p>\n    I also decided that I would compress the maps into a new folder in their bz2 format for the fastdl server to save me time later on. I could have copied the files that were already bz2 but decided it was easier to just decompress and then compress again.\n  </p>\n<pre class=\"line-numbers  language-python\"><code>async def compress_file(filepath):\n    print(f'Compressing {filepath} for redirect.')\n    output_filepath = os.getcwd() + '/compressed_maps/' + f\"{filepath}.bz2\"\n\n    with open('maps/' + filepath, 'rb') as input:\n        with bz2.BZ2File(output_filepath, 'wb') as output:\n            shutil.copyfileobj(input, output)\n\n    return output_filepath</code></pre>\n<hr class=\"separator separator--long-line\" />\n\n    <h2 id=\"conclusion\">\n      Conclusion\n    </h2>\n\n  <p>\n    Writing scripts is useful! This was a challenging script to write as I haven't messed with file decompression before. I hope to add the ability to auto upload them to the servers too but didn't want to do that for this release. BS4 is a very cool library for python and made making this script a lot easier. Thanks for making it this far, here's the <a href=\"https://github.com/neilstottler/featured-maps-grabber/blob/main/main.py\">source code</a>.\n  </p>",
            "image": "https://nesman.dev/media/posts/7/featured_maps_page-2.PNG",
            "author": {
                "name": "Neil Stottler"
            },
            "tags": [
                   "Coding"
            ],
            "date_published": "2023-01-22T18:09:02-05:00",
            "date_modified": "2023-01-22T20:30:47-05:00"
        },
        {
            "id": "https://nesman.dev/rocketforge.html",
            "url": "https://nesman.dev/rocketforge.html",
            "title": "Rocketforge",
            "summary": "Still writing this up. https://tf2maps.net/downloads/rocketforge.6927/",
            "content_html": "<p>Still writing this up. <a href=\"#INTERNAL_LINK#/post/null\">https://tf2maps.net/downloads/rocketforge.6927/</a></p>",
            "image": "https://nesman.dev/media/posts/4/20210112201826_1.jpg",
            "author": {
                "name": "Neil Stottler"
            },
            "tags": [
                   "Level Design"
            ],
            "date_published": "2023-01-09T20:51:02-05:00",
            "date_modified": "2023-01-19T12:06:50-05:00"
        },
        {
            "id": "https://nesman.dev/laborde.html",
            "url": "https://nesman.dev/laborde.html",
            "title": "Laborde",
            "summary": "I liked the theme of Gorge, which is Alpine, and with that I present to you pl_laborde. A laboratory based&hellip;",
            "content_html": "<div class=\"bbWrapper\">I liked the theme of Gorge, which is Alpine, and with that I present to you pl_laborde. A laboratory based on a mountain side. Write-up is still being made, see the tf2maps page instead for now. <a href=\"https://tf2maps.net/downloads/laborde.8559/\">https://tf2maps.net/downloads/laborde.8559/</a></div>",
            "image": "https://nesman.dev/media/posts/2/20201223202423_1.jpg",
            "author": {
                "name": "Neil Stottler"
            },
            "tags": [
                   "Level Design"
            ],
            "date_published": "2023-01-08T21:16:49-05:00",
            "date_modified": "2023-01-19T12:06:31-05:00"
        },
        {
            "id": "https://nesman.dev/rumford.html",
            "url": "https://nesman.dev/rumford.html",
            "title": "Rumford",
            "summary": "For a while now I’ve been accustomed to Level Design in Team Fortress 2. Before Rumford, I made ten other&hellip;",
            "content_html": "\n  <p>\n    For a while now I’ve been accustomed to Level Design in Team Fortress 2. Before Rumford, I made ten other maps for the game. The previous map being Laborde, a payload map that I took a lot of lessons learned from to design Rumford.<br>\n  </p>\n<hr class=\"separator separator--long-line\" />\n\n    <h2 id=\"the-gamemode-payload\">\n      The Gamemode Payload\n    </h2>\n\n  <p>\n    Team Fortress 2 has many gamemode to pick and choose from. You can fight across mid-sections of maps to push into the other team's base and retrieve the flag in Capture The Flag. Battle over the centerpoint of a map with King of the Hill with an everlasting battle always changing hands depending on the team composition. Fight in an uphill battle for several checkpoints or defend against it with Attack/Defend. Battle back and forth across an entire map with the fast paced back-and-forth gameplay of 5CP (5 control points). Even race the other team in pushing your payload to the end of the track in Payload Race. Then of course there’s the multistage variants of Attack/Defend, Payload Rush, and Payload.\n<br>\n<br>Then there’s Payload, the gamemode with similar concepts to Attack/Defend but different enough to make players go “hey what’s that!” and suck them into several matches. Payload is the gamemode where BLU team is pushing a cart through several checkpoints to the end of the map, called the finale. RED team is defending all of these checkpoints of course, whether it be two, three, four, or even five in some cases. Did I mention it can be multi stage? That wasn’t the finale you captured, that was the first of three stages.\n<br>\n<br>The payload cart isn’t just a normal thing you push in-game either, it’s more than that. The payload cart also heals those who dedicate their time in the round to pushing and even goes as far as replenishing their ammo. The more players that push the cart, the faster it goes, until you hit the limit. The payload cart can also roll back if you don’t touch it long enough, so stay on it at all times.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <a href=\"https://wiki.teamfortress.com/wiki/Payload#/media/File:BLU_Bombcart.png\">\n        <img loading=\"lazy\" src=\"https://nesman.dev/media/posts/1/BLU_Bombcart.png\" height=\"739\" width=\"573\" alt=\"\"  sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://nesman.dev/media/posts/1/responsive/BLU_Bombcart-xs.png 300w ,https://nesman.dev/media/posts/1/responsive/BLU_Bombcart-sm.png 480w ,https://nesman.dev/media/posts/1/responsive/BLU_Bombcart-md.png 768w\">\n      </a>\n      \n    </figure>\n<hr class=\"separator separator--long-line\" />\n\n    <h2 id=\"the-contest\">\n      The Contest\n    </h2>\n\n  <p>\n    Being the 50th contest TF2Maps.net hosted there had to be some special twist to it and in fact there was! The contest Rule of Threes was a contest focused around 3 contests running at the same time where each of the restraints/objectives was that you had to have at least and no more than three of the objectives. Seems simple right? Three checkpoints in a payload map, three control points in attack/defend, three control points on a 5CP… that would just be 3CP then, three stages in any multistage map, you get the idea. After having work on Laborde for a long time and pushing 48 updates to the map I wanted to start a new project, in comes Rumford.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://nesman.dev/media/posts/1/ro3-2.PNG\" height=\"276\" width=\"996\" alt=\"\"  sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://nesman.dev/media/posts/1/responsive/ro3-2-xs.PNG 300w ,https://nesman.dev/media/posts/1/responsive/ro3-2-sm.PNG 480w ,https://nesman.dev/media/posts/1/responsive/ro3-2-md.PNG 768w\">\n      \n    </figure>\n<hr class=\"separator separator--long-line\" />\n\n    <h2 id=\"early-design-ideas\">\n      Early Design Ideas\n    </h2>\n\n  <p>\n    So a new contest has dropped and I’m itching to make a new idea. After having spent ages on Laborde and it basically becoming my labor of love, I got a kind of reputation as the payload enjoyer, which was right. Payload in my opinion is one of the more enjoyable game modes in Team Fortress 2. I have spent hours in matches before on maps having a blast and getting all wide eyed at maps that are beautiful and tell a story. I also wanted to tell a story with payload since BLU team is progressing through the map, but what is that story?\n<br>\n<br>From the beginning I’ve always struggled with coming up with a name for a new project. Some mappers choose town names, national park names, other languages translated to English, or simple phrases combined into one. Things like Dixie, Altitude, Snowbase, Badlands, or Laborde, one of my other maps. I settled on something from my home state where I spent a decent amount of time in high school playing sports. Rumford, a small mill town in northern Maine with their famous paper mill. This is where I also settled on the theme, Alpine where I tell the story of how a paper mill works.<br>\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <a href=\"https://upload.wikimedia.org/wikipedia/commons/6/69/Rumford_Paper_Mill_2.JPG \" target=\"_blank\">\n        <img loading=\"lazy\" src=\"https://nesman.dev/media/posts/1/Rumford_Paper_Mill_2.JPG\" height=\"2736\" width=\"3648\" alt=\"View of the Rumford Maine paper mill.\"  sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://nesman.dev/media/posts/1/responsive/Rumford_Paper_Mill_2-xs.JPG 300w ,https://nesman.dev/media/posts/1/responsive/Rumford_Paper_Mill_2-sm.JPG 480w ,https://nesman.dev/media/posts/1/responsive/Rumford_Paper_Mill_2-md.JPG 768w\">\n      </a>\n      <figcaption>Via Wikipedia.</figcaption>\n    </figure>\n<hr class=\"separator separator--long-line\" />\n\n    <h2 id=\"how-does-a-paper-mill-work\">\n      How Does a Paper Mill Work?\n    </h2>\n\n  <p>\n    Like most things, paper making isn’t as simple as people think it is. It’s a complex process that requires a massive facility and thousands of moving parts. I spent hours researching the complex process of making paper so I could have an understanding of what my story should be in the map. In comes YouTube, Wikipedia, and many other resources on the internet.\n<br>\n<br>&nbsp;<a href=\"https://www.youtube.com/watch?v=2Uh3XIadm1A\">https://www.youtube.com/watch?v=2Uh3XIadm1A</a>\n<br><a href=\"https://www.youtube.com/watch?v=3Gj4J-2SJMI\">https://www.youtube.com/watch?v=3Gj4J-2SJMI</a>\n<br><a href=\"https://www.dssmith.com/media/our-stories/2020/7/how-is-paper-made-our-paper-production-process\">https://www.dssmith.com/media/our-stories/2020/7/how-is-paper-made-our-paper-production-process</a>\n<br>\n<br>I quickly learned there were lots of steps to making paper and I had less than ten points where I could tell the story of paper. I had to sketch this out on paper and see how many areas I had to work with. I had about maybe five to six areas where I could tell how paper was made. Starting with the first courtyard just prior to A, I could show how the logs used to make the paper would be brought in. Checkpoint A where I could show how the logs were turned into wood chips. Courtyard before B where I could show how the wood chips were transported to massive storage facilities along with a dam that powers the mill. Checkpoint B where you see the massive mill from the outside and how it transitions into an industrial landscape from the woods. Courtyard before C where I show how the wood chips are turned into paper pulp. Checkpoint C, the finale, where I can show the paper rolling and shipping process. All of these things shaped and influenced the map design.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://nesman.dev/media/posts/1/rough-layout-idea.png\" height=\"2500\" width=\"1800\" alt=\"\"  sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://nesman.dev/media/posts/1/responsive/rough-layout-idea-xs.png 300w ,https://nesman.dev/media/posts/1/responsive/rough-layout-idea-sm.png 480w ,https://nesman.dev/media/posts/1/responsive/rough-layout-idea-md.png 768w\">\n      \n    </figure>\n<hr class=\"separator separator--long-line\" />\n\n    <h2 id=\"early-design-concepts\">\n      Early Design Concepts\n    </h2>\n\n  <p>\n    Now that I had a basic understanding of what the starting and final stages needed to be in terms of theme, it was time to start blocking out some ideas. I knew the first area had involve more wooded areas compared to last while still delivering on the theme I wanted to follow. From the beginning I wanted to have a train in the map and that was an important set piece in the first area. Similar to Barnblitz, a Valve map in Team Fortress 2, I decided to elevate the train above the play area so that the player could still see it but not have to worry about fighting around it.<br>\n  </p>\n\n  <div  class=\"gallery-wrapper\">\n    <div class=\"gallery\" data-columns=\"1\">\n      <figure class=\"gallery__item\">\n      <a href=\"https://nesman.dev/media/posts/1/gallery/20210217222515_1.jpg\" data-size=\"1920x1080\">\n        <img loading=\"lazy\" src=\"https://nesman.dev/media/posts/1/gallery/20210217222515_1-thumbnail.jpg\" height=\"405\" width=\"720\" alt=\"\" >\n      </a>\n      \n    </figure>\n    </div>\n  </div>\n<div><sl-image-comparer position=\"25\">\n  <img loading=\"lazy\"     slot=\"before\"\n    src=\"https://raw.githubusercontent.com/neilstottler/neilstottler.github.io/main/media/files/20230119175850_1.jpg\"\n    alt=\"Rumford in the first version.\"\n   data-is-external-image=\"true\">\n  <img loading=\"lazy\"     slot=\"after\"\n    src=\"https://raw.githubusercontent.com/neilstottler/neilstottler.github.io/main/media/files/20230119180003_1.jpg\"\n    alt=\"Rumford in its finished state.\"\n   data-is-external-image=\"true\">\n</sl-image-comparer></div>\n\n  <p>\n    Because of the contest I was limited to having three checkpoints where most traditional payload maps have four to five. My previous payload map, Laborde, had five checkpoints and was considered a long map. I was not used to three checkpoints. I decided to implement what was called a “delay mechanic” between Checkpoint B and the finale. Barnblitz does a similar thing just before Checkpoint B by using a turntable that stops the payload cart and holds it for about 10-15 seconds. I decided to do the same thing and have it be a mini checkpoint.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://nesman.dev/media/posts/1/20210226180745_1.jpg\" height=\"1080\" width=\"1920\" alt=\"\"  sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://nesman.dev/media/posts/1/responsive/20210226180745_1-xs.jpg 300w ,https://nesman.dev/media/posts/1/responsive/20210226180745_1-sm.jpg 480w ,https://nesman.dev/media/posts/1/responsive/20210226180745_1-md.jpg 768w\">\n      \n    </figure>\n<hr class=\"separator separator--long-line\" />\n\n    <h2 id=\"testing-the-map\">\n      Testing The Map\n    </h2>\n\n  <p>\n    Testing your map in Team Fortress 2 isn't as easy as loading the map up in singleplayer and adding some bots, well it is but the bots won't tell you much useful data. For this I leveraged TF2Maps.net and their map testing system. It incases playtesting sessions with actual people, a comprehensive <a href=\"https://feedback.tf2maps.net/map/pl_rumford_a1a/\">feedback plugin</a>, demos so we can review in-game footage of what happened, and then their discord to ask people who played your map questions about feedback that was left.\n  </p>\n\n  <p>\n    Testing your map with actual people is very important, they can do things you'll never expect. After tests I would try and gather my thoughts and observations in a <a href=\"https://tf2maps.net/threads/rumford.43762/\">forum post</a>&nbsp;where I would talk about what I think needs to be done next. The first couple of tests were showing the basic track layout was alright and I could keep building on it rather than having to scrap an entire section of the map. I would also review the coldmaps, <a href=\"https://github.com/tails8521/coldmaps\">a plugin built by one of our users</a>, where you can import your demo into the program and review player death/kill positions. The left is victim positions and the right is the killer.\n  </p>\n<div><sl-image-comparer>\n  <img loading=\"lazy\"     slot=\"before\"\n    src=\"https://raw.githubusercontent.com/neilstottler/neilstottler.github.io/main/media/files/a3_victimpos.png\"\n    alt=\"Version 3 victium positions.\"\n   data-is-external-image=\"true\">\n  <img loading=\"lazy\"     slot=\"after\"\n    src=\"https://raw.githubusercontent.com/neilstottler/neilstottler.github.io/main/media/files/a3_killerpos.png\"\n    alt=\"Version 3 killer positions.\"\n   data-is-external-image=\"true\">\n</sl-image-comparer></div>\n\n  <p>\n    From watching the demos, looking at the written feedback, and staring for hours at the coldmaps I could really see how the map was being received by players and what I should think about changing. That's one thing about level design many people don't consider, you can make all the changes you want but they might not be good changes at all. I toyed around in mspaint a lot trying to sketch out ideas for parts of the map that didn't play well.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://nesman.dev/media/posts/1/A-idea.png\" height=\"936\" width=\"1680\" alt=\"sketch of A point\"  sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://nesman.dev/media/posts/1/responsive/A-idea-xs.png 300w ,https://nesman.dev/media/posts/1/responsive/A-idea-sm.png 480w ,https://nesman.dev/media/posts/1/responsive/A-idea-md.png 768w\">\n      \n    </figure>\n\n  <p>\n    I was even receiving feedback from other mappers and testers that had paintovers of possible ideas that might make an area flow better.\n  </p>\n\n    <figure class=\"post__image post__image--center\">\n      <img loading=\"lazy\" src=\"https://nesman.dev/media/posts/1/idofeedbackB.png\" height=\"681\" width=\"1196\" alt=\"feedback from community member idolon\"  sizes=\"(max-width: 48em) 100vw, 768px\" srcset=\"https://nesman.dev/media/posts/1/responsive/idofeedbackB-xs.png 300w ,https://nesman.dev/media/posts/1/responsive/idofeedbackB-sm.png 480w ,https://nesman.dev/media/posts/1/responsive/idofeedbackB-md.png 768w\">\n      \n    </figure>\n\n  <p>\n    The iterative process isn't something that is new to me. I saw it when I participated in <a href=\"https://en.wikipedia.org/wiki/FIRST_Robotics_Competition\">FRC</a> in high school especially with that six week time crunch. This was no different especially since I was under the time crunch of participating in the contest. Each version I was trying something different, tweaking something I already, trying to perfect the gameplay so players enjoyed something I made. You can see the layout change from the first version to the tenth version below.\n  </p>\n<div><sl-image-comparer>\n  <img loading=\"lazy\"     slot=\"before\"\n    src=\"https://raw.githubusercontent.com/neilstottler/neilstottler.github.io/main/media/files/20230120205832_1.jpg\"\n    alt=\"Rumford B overview A1.\"\n   data-is-external-image=\"true\">\n  <img loading=\"lazy\"     slot=\"after\"\n    src=\"https://raw.githubusercontent.com/neilstottler/neilstottler.github.io/main/media/files/20230120205620_1.jpg\"\n    alt=\"Rumford B overview A10.\"\n   data-is-external-image=\"true\">\n</sl-image-comparer></div>\n\n  <p>\n    Last was probably one of the hardest parts of the map to design. I have a track record of redesign payload lasts a lot. Laborde has gone through about five or six new designs and I'm still not happy with how that map is. This map was no different really although I didn't completely scrap the basic concept.\n  </p>\n<div><sl-image-comparer>\n  <img loading=\"lazy\"     slot=\"before\"\n    src=\"https://raw.githubusercontent.com/neilstottler/neilstottler.github.io/main/media/files/20230120205527_1.jpg\"\n    alt=\"Rumford last a1.\"\n   data-is-external-image=\"true\">\n  <img loading=\"lazy\"     slot=\"after\"\n    src=\"https://raw.githubusercontent.com/neilstottler/neilstottler.github.io/main/media/files/20230120205811_1.jpg\"\n    alt=\"Rumford last a10.\"\n   data-is-external-image=\"true\">\n</sl-image-comparer></div>\n\n  <p>\n    The routes were the main focus as the overall feel of the room was fine. I generally like to stick to a one main route (the cart path) and two flanks. However, because this last was at a 90 degree angle it was making one of the flanks overpowered due to players reaching the last area before the cart was getting pushed in. So I kept toying around with the flanks but kept the basic cart path throughout most of the map.\n  </p>\n<hr class=\"separator separator--long-line\" />\n\n    <h2 id=\"artpassing\">\n      Artpassing\n    </h2>\n\n  <p>\n    Well the <a href=\"https://tf2maps.net/threads/contest-50-rule-of-threes-minor-contest-results.44087/\">minor contest</a> is over now onto the major! That means detailing and lots of it. I decided to record a timelapse of myself detailing the map and have been uploading that series to youtube.\n  </p>\n<div><div class=\"post__iframe\"><iframe loading=\"lazy\" width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/0S9ozuQwPXU\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe></div></div>\n\n  <p>\n    Detailing Rumford was pretty challenging. There's a lot to detailing that no one really considers when playing the game. All the little trim details on the outside of the buildings, I had to place everything by hand. All the little dust particles below each light indoors, I could copy those around but still had to adjust each one. Displacement, oh boy displacements, those take time to sculpt the desired shape. Need props that aren't already in the game? Time to get someone to make them. Want text on a wall? I have to place and then resize each one. Better make sure those are place in a way that makes sense too! Can't just slap a \"caution wet\" sign on a pile of dirt, yea it'd be funny but it wouldn't make too much sense.\n  </p>\n<div><sl-image-comparer>\n  <img loading=\"lazy\"     slot=\"before\"\n    src=\"https://raw.githubusercontent.com/neilstottler/neilstottler.github.io/main/media/files/20230121201644_1.jpg\"\n    alt=\"Rumford in its finished state.\"\n   data-is-external-image=\"true\">\n    <img loading=\"lazy\"     slot=\"after\"\n    src=\"https://raw.githubusercontent.com/neilstottler/neilstottler.github.io/main/media/files/20230121201235_1.jpg\"\n    alt=\"Rumford in a12.\"\n   data-is-external-image=\"true\">\n</sl-image-comparer></div>\n\n  <p>\n    Making the buildings make some amount of sense also took a while. The big blue building at the first checkpoint has a train running right through it, can't say I know any real building like that.\n  </p>\n<div><sl-image-comparer>\n  <img loading=\"lazy\"     slot=\"before\"\n    src=\"https://raw.githubusercontent.com/neilstottler/neilstottler.github.io/main/media/files/20230119180003_1.jpg\"\n    alt=\"Rumford in its finished state.\"\n   data-is-external-image=\"true\">\n  <img loading=\"lazy\"     slot=\"after\"\n    src=\"https://raw.githubusercontent.com/neilstottler/neilstottler.github.io/main/media/files/20230119175850_1.jpg\"\n    alt=\"Rumford in the first version.\"\n   data-is-external-image=\"true\">\n</sl-image-comparer>\n</div>\n<div><sl-image-comparer>\n  <img loading=\"lazy\"     slot=\"before\"\n    src=\"https://raw.githubusercontent.com/neilstottler/neilstottler.github.io/main/media/files/20230121202105_1.jpg\"\n    alt=\"Rumford in its finished state.\"\n   data-is-external-image=\"true\">\n  <img loading=\"lazy\"     slot=\"after\"\n    src=\"https://raw.githubusercontent.com/neilstottler/neilstottler.github.io/main/media/files/20230121201546_1.jpg\"\n    alt=\"Rumford in the first version.\"\n   data-is-external-image=\"true\">\n</sl-image-comparer></div>\n<div><sl-image-comparer>\n  <img loading=\"lazy\"     slot=\"before\"\n    src=\"https://raw.githubusercontent.com/neilstottler/neilstottler.github.io/main/media/files/20230121205739_1.jpg\"\n    alt=\"Rumford in its finished state.\"\n   data-is-external-image=\"true\">\n  <img loading=\"lazy\"     slot=\"after\"\n    src=\"https://raw.githubusercontent.com/neilstottler/neilstottler.github.io/main/media/files/20230121205659_1.jpg\"\n    alt=\"Rumford in the first version.\"\n   data-is-external-image=\"true\">\n</sl-image-comparer></div>\n\n  <p>\n    Sometimes I would have to completely rethink how an area would look. There's a lot of creativity you can have when it comes to making an area look nice. The dam was a really cool set piece to make and I wish I was able to show it off more in the map. Dams are needed for paper mills so it's very fitting!\n  </p>\n<div><sl-image-comparer>\n  <img loading=\"lazy\"     slot=\"before\"\n    src=\"https://raw.githubusercontent.com/neilstottler/neilstottler.github.io/main/media/files/20230121201650_1.jpg\"\n    alt=\"Rumford in its finished state.\"\n   data-is-external-image=\"true\">\n  <img loading=\"lazy\"     slot=\"after\"\n    src=\"https://raw.githubusercontent.com/neilstottler/neilstottler.github.io/main/media/files/20230121201309_1.jpg\"\n    alt=\"Rumford in the first version.\"\n   data-is-external-image=\"true\">\n</sl-image-comparer></div>\n<div><sl-image-comparer>\n  <img loading=\"lazy\"     slot=\"before\"\n    src=\"https://raw.githubusercontent.com/neilstottler/neilstottler.github.io/main/media/files/20230121201655_1.jpg\"\n    alt=\"Rumford in its finished state.\"\n   data-is-external-image=\"true\">\n  <img loading=\"lazy\"     slot=\"after\"\n    src=\"https://raw.githubusercontent.com/neilstottler/neilstottler.github.io/main/media/files/20230121201338_1.jpg\"\n    alt=\"Rumford in the first version.\"\n   data-is-external-image=\"true\">\n</sl-image-comparer>\n</div>\n\n  <p>\n    A lot of the lighting had to be tweaked manually too, luckily I could do that in groups and not have to switch each one. The indoor lighting had to be much different than the outdoor lighting. Believe it or not the next images are the same area!\n  </p>\n<div><sl-image-comparer>\n  <img loading=\"lazy\"     slot=\"before\"\n    src=\"https://raw.githubusercontent.com/neilstottler/neilstottler.github.io/main/media/files/20230121202054_1.jpg\"\n    alt=\"Rumford in its finished state.\"\n   data-is-external-image=\"true\">\n  <img loading=\"lazy\"     slot=\"after\"\n    src=\"https://raw.githubusercontent.com/neilstottler/neilstottler.github.io/main/media/files/20230121201509_1.jpg\"\n    alt=\"Rumford in the first version.\"\n   data-is-external-image=\"true\">\n</sl-image-comparer></div>\n<div><sl-image-comparer>\n  <img loading=\"lazy\"     slot=\"before\"\n    src=\"https://raw.githubusercontent.com/neilstottler/neilstottler.github.io/main/media/files/20230121202044_1.jpg\"\n    alt=\"Rumford in its finished state.\"\n   data-is-external-image=\"true\">\n  <img loading=\"lazy\"     slot=\"after\"\n    src=\"https://raw.githubusercontent.com/neilstottler/neilstottler.github.io/main/media/files/20230121201432_1.jpg\"\n    alt=\"Rumford in the first version.\"\n   data-is-external-image=\"true\">\n</sl-image-comparer></div>\n<div><sl-image-comparer>\n  <img loading=\"lazy\"     slot=\"before\"\n    src=\"https://raw.githubusercontent.com/neilstottler/neilstottler.github.io/main/media/files/20230121202021_1.jpg\"\n    alt=\"Rumford in its finished state.\"\n   data-is-external-image=\"true\">\n  <img loading=\"lazy\"     slot=\"after\"\n    src=\"https://raw.githubusercontent.com/neilstottler/neilstottler.github.io/main/media/files/20230121201410_1.jpg\"\n    alt=\"Rumford in the first version.\"\n   data-is-external-image=\"true\">\n</sl-image-comparer></div>\n\n  <p>\n    There's more to a map than just how it looks. Soundscapes are an important part in making the player feel where they are, the outdoor areas had outdoor sounds and indoor areas had indoor sounds. Even specific machinery had a specific sound so you could know that you are at the woodchip conveyer belt versus being at the substation. Below is a flythrough video of the map.\n  </p>\n<div><div class=\"post__iframe\"><iframe loading=\"lazy\" width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/cDxiM08v9Go\" title=\"YouTube video player\" frameborder=\"0\" allow=\"accelerometer; autoplay; clipboard-write; encrypted-media; gyroscope; picture-in-picture; web-share\" allowfullscreen></iframe></div></div>\n\n  <p>\n    Thanks for taking the time to read the article. There's a lot more I didn't cover that I hope to add at some point but feel free to read my <a href=\"https://tf2maps.net/downloads/rumford.11023/\">update notes</a> and how the map developed. Oh, and go upvote it on the <a href=\"https://steamcommunity.com/sharedfiles/filedetails/?id=2785679828\">steam workshop</a>.\n  </p>",
            "image": "https://nesman.dev/media/posts/1/20220323124513_1-2.jpg",
            "author": {
                "name": "Neil Stottler"
            },
            "tags": [
                   "Level Design"
            ],
            "date_published": "2023-01-08T19:50:20-05:00",
            "date_modified": "2023-01-21T21:56:43-05:00"
        }
    ]
}
